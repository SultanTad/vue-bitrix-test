{"remainingRequest":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\utils\\methodsBX24.js","dependencies":[{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\utils\\methodsBX24.js","mtime":1702029054000},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1705726085379},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\eslint-loader\\index.js","mtime":1705726099501}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}