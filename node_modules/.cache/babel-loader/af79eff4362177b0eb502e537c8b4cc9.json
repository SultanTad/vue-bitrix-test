{"remainingRequest":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\pages\\Test.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\pages\\Test.vue","mtime":1706572356480},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1705726085379},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1705726102679}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzovVXNlcnMvXHUwNDIxXHUwNDQzXHUwNDNCXHUwNDQyXHUwNDMwXHUwNDNEL0Rvd25sb2Fkcy92dWVqcy1iaXRyaXgyNC12ZXIyLjAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvXHUwNDIxXHUwNDQzXHUwNDNCXHUwNDQyXHUwNDMwXHUwNDNEL0Rvd25sb2Fkcy92dWVqcy1iaXRyaXgyNC12ZXIyLjAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBEYXRlUGlja2VyIGZyb20gInZ1ZTItZGF0ZXBpY2tlciI7CmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICJ2dWUtbXVsdGlzZWxlY3QiOwppbXBvcnQgInZ1ZTItZGF0ZXBpY2tlci9pbmRleC5jc3MiOwppbXBvcnQgInZ1ZTItZGF0ZXBpY2tlci9sb2NhbGUvemgtY24iOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVGVzdCIsCiAgY29tcG9uZW50czogewogICAgRGF0ZVBpY2tlcjogRGF0ZVBpY2tlciwKICAgIE11bHRpc2VsZWN0OiBNdWx0aXNlbGVjdAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHZhbHVlOiBbXSwKICAgICAgZW1wbG95ZWVzQ291bnQ6IFtdLAogICAgICBjb21wbGV0ZWRUYXNrczogW10sCiAgICAgIG1vZGFsVGFza3M6IFtdLAogICAgICBzZWxlY3RFbXBsb3llZTogIiIsCiAgICAgIGFjdGl2ZU1vZGFsOiBmYWxzZSwKICAgICAgYWN0aXZlV2luZG93OiBmYWxzZQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNoYW5nZURhdGU6IGZ1bmN0aW9uIGNoYW5nZURhdGUoZXZlbnQpIHsKICAgICAgdGhpcy52YWx1ZTEgPSBldmVudDsKICAgICAgdGhpcy5jcmVhdGVSZXBvcnQoKTsKICAgIH0sCiAgICBhY3RpdmVNb2RhbFdpbmRvdzogZnVuY3Rpb24gYWN0aXZlTW9kYWxXaW5kb3coKSB7CiAgICAgIHRoaXMuYWN0aXZlTW9kYWwgPSAhdGhpcy5hY3RpdmVNb2RhbDsKICAgICAgdGhpcy5hY3RpdmVXaW5kb3cgPSAhdGhpcy5hY3RpdmVXaW5kb3c7CiAgICB9LAogICAgZmV0Y2hNb2RhbFRhc2tzOiBmdW5jdGlvbiBmZXRjaE1vZGFsVGFza3MoaWQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHRhc2tzLCBvYmo7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGFza3MgPSBbXTsKCiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVNb2RhbFdpbmRvdygpOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoVGFza3MoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgdGFza3MgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgICAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgICAgICAgICAgIGlmICh0YXNrLmlkID09IGlkKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLmlkID0gdGFzay5pZDsKICAgICAgICAgICAgICAgICAgICBvYmoudGl0bGUgPSB0YXNrLnRpdGxlOwogICAgICAgICAgICAgICAgICAgIG9iai5kZWFkbGluZSA9IHRhc2suZGVhZGxpbmU7CiAgICAgICAgICAgICAgICAgICAgb2JqLmNyZWF0ZWRCeSA9IHRhc2suY3JlYXRlZEJ5OwogICAgICAgICAgICAgICAgICAgIG9iai5yZXNwb25zaWJsZUlkID0gdGFzay5yZXNwb25zaWJsZUlkOwogICAgICAgICAgICAgICAgICAgIG9iai5hY2NvbXBsaWNlcyA9IHRhc2suYWNjb21wbGljZXMuam9pbigiLCAiKTsKICAgICAgICAgICAgICAgICAgICBvYmouYXVkaXRvcnMgPSB0YXNrLmF1ZGl0b3JzOwogICAgICAgICAgICAgICAgICAgIG9iai5jcmVhdGVkRGF0ZSA9IG1vbWVudCh0YXNrLmNyZWF0ZWREYXRlKS5mb3JtYXQoKTsKICAgICAgICAgICAgICAgICAgICBvYmouY2xvc2VkRGF0ZSA9IG1vbWVudCh0YXNrLmNsb3NlZERhdGUpLmZvcm1hdCgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfdGhpcy5tb2RhbFRhc2tzLnB1c2gob2JqKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGNvbnZlck1TVG9EYXlzOiBmdW5jdGlvbiBjb252ZXJNU1RvRGF5cyhtcykgewogICAgICB2YXIgc2VjID0gbXMgLyAxMDAwOwogICAgICB2YXIgbWlucyA9IHNlYyAvIDYwOwogICAgICB2YXIgaG91cnMgPSBtaW5zIC8gNjA7CiAgICAgIHZhciBkID0gTWF0aC5mbG9vcihob3VycyAvIDI0KTsKICAgICAgdmFyIGggPSBNYXRoLmZsb29yKGhvdXJzICUgMjQpOwogICAgICB2YXIgbSA9IE1hdGguZmxvb3IobWlucyAlIDYwKTsKICAgICAgdmFyIGREaXNwbGF5ID0gZCA+IDAgPyBkICsgItC0LiAiIDogIiI7CiAgICAgIHZhciBoRGlzcGxheSA9IGggPiAwID8gaCArICLRhy4gIiA6ICIiOwogICAgICB2YXIgbURpc3BsYXkgPSBtID4gMCA/IG0gKyAi0LwuICIgOiAiIjsKCiAgICAgIGlmICghZCAmJiAhaCAmJiAhbSkgewogICAgICAgIHJldHVybiAwOwogICAgICB9CgogICAgICByZXR1cm4gZERpc3BsYXkgKyBoRGlzcGxheSArIG1EaXNwbGF5OwogICAgfSwKICAgIGdldFRpbWVUYXNrczogZnVuY3Rpb24gZ2V0VGltZVRhc2tzKHRhc2tzKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKCF0YXNrcyB8fCAhdGFza3MubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KCiAgICAgIHZhciBtcyA9IDA7CiAgICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2spIHsKICAgICAgICBpZiAodGFzay5zdGF0dXMgPT0gIjUiKSB7CiAgICAgICAgICBtcyArPSBfdGhpczIubW9tZW50KHRhc2suY2xvc2VkRGF0ZSkuZGlmZihfdGhpczIubW9tZW50KHRhc2suY3JlYXRlZERhdGUpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gbXMgLyB0YXNrcy5sZW5ndGg7CiAgICB9LAogICAgY3JlYXRlUmVwb3J0OiBmdW5jdGlvbiBjcmVhdGVSZXBvcnQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHRhc2tzLCBmaWx0ZXIsIGNsb3NlZERhdGUsIGNyZWF0ZURhdGU7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRhc2tzID0gW107CiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBPYmplY3QuYXNzaWduKHsKICAgICAgICAgICAgICAgICAgUkVTUE9OU0lCTEVfSUQ6IF90aGlzMy5zZWxlY3RFbXBsb3llZS5sZW5ndGggPyBfdGhpczMuc2VsZWN0RW1wbG95ZWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uSUQ7CiAgICAgICAgICAgICAgICAgIH0pIDogW10KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5mZXRjaFRhc2tzKGZpbHRlcik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHRhc2tzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrcyk7CiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBPYmplY3QuYXNzaWduKHsKICAgICAgICAgICAgICAgICAgIj49Q0xPU0VEX0RBVEUiOiBtb21lbnQoX3RoaXMzLnZhbHVlWzBdKS5mb3JtYXQoKSwKICAgICAgICAgICAgICAgICAgIjw9Q0xPU0VEX0RBVEUiOiBtb21lbnQoX3RoaXMzLnZhbHVlWzFdKS5mb3JtYXQoKQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBSRVNQT05TSUJMRV9JRDogX3RoaXMzLnNlbGVjdEVtcGxveWVlLmxlbmd0aCA/IF90aGlzMy5zZWxlY3RFbXBsb3llZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5JRDsKICAgICAgICAgICAgICAgICAgfSkgOiBbXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXIpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZmV0Y2hUYXNrcyhmaWx0ZXIpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgY2xvc2VkRGF0ZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgZmlsdGVyID0gT2JqZWN0LmFzc2lnbih7CiAgICAgICAgICAgICAgICAgICI+PUNSRUFURURfREFURSI6IG1vbWVudChfdGhpczMudmFsdWVbMF0pLmZvcm1hdCgpLAogICAgICAgICAgICAgICAgICAiPD1DUkVBVEVEX0RBVEUiOiBtb21lbnQoX3RoaXMzLnZhbHVlWzFdKS5mb3JtYXQoKQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBSRVNQT05TSUJMRV9JRDogX3RoaXMzLnNlbGVjdEVtcGxveWVlLmxlbmd0aCA/IF90aGlzMy5zZWxlY3RFbXBsb3llZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5JRDsKICAgICAgICAgICAgICAgICAgfSkgOiBbXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5mZXRjaFRhc2tzKGZpbHRlcik7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBjcmVhdGVEYXRlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfdGhpczMuY29tcGxldGVkVGFza3MgPSBbXTsKCiAgICAgICAgICAgICAgICBfdGhpczMuZW1wbG95ZWVzQ291bnQuZm9yRWFjaChmdW5jdGlvbiAoZW1wbG95ZWUpIHsKICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICBpZDogZW1wbG95ZWUuSUQsCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZW1wbG95ZWUuTkFNRQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB2YXIgZW1wbG95ZWVUYXNrcyA9IHRhc2tzLmZpbHRlcihmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLnN0YXR1cyAhPSAiNSIgJiYgdGFzay5yZXNwb25zaWJsZS5pZCA9PSBlbXBsb3llZS5JRDsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZWRUYXNrcyA9IHRhc2tzLmZpbHRlcihmdW5jdGlvbiAoY29tcGxldGVkVGFzaykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZWRUYXNrLnN0YXR1cyA9PSAiNSIgJiYgY29tcGxldGVkVGFzay5yZXNwb25zaWJsZS5pZCA9PSBlbXBsb3llZS5JRDsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHZhciBjbG9zZWROZXdUYXNrcyA9IGNyZWF0ZURhdGUuZmlsdGVyKGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhc2sucmVzcG9uc2libGUuaWQgPT0gZW1wbG95ZWUuSUQ7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB2YXIgY2xvc2VkQWxsVGFza3MgPSBjbG9zZWREYXRlLmZpbHRlcihmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLnJlc3BvbnNpYmxlLmlkID09IGVtcGxveWVlLklEOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIHZhciB1c2VyVGltZSA9IF90aGlzMy5nZXRUaW1lVGFza3MoY2xvc2VkQWxsVGFza3MpOwoKICAgICAgICAgICAgICAgICAgb2JqLmFsbFRhc2tzID0gZW1wbG95ZWVUYXNrcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIG9iai5jb21wbGV0ZWRUYXNrcyA9IGNvbXBsZXRlZFRhc2tzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgb2JqLmNsb3NlZE5ld1Rhc2tzID0gY2xvc2VkTmV3VGFza3MubGVuZ3RoOwogICAgICAgICAgICAgICAgICBvYmouY2xvc2VkQWxsVGFza3MgPSBjbG9zZWRBbGxUYXNrcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIG9iai5hdmVyYWdlVGltZSA9IHVzZXJUaW1lOwoKICAgICAgICAgICAgICAgICAgX3RoaXMzLmNvbXBsZXRlZFRhc2tzLnB1c2gob2JqKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZmV0Y2hUYXNrczogZnVuY3Rpb24gZmV0Y2hUYXNrcyhmaWx0ZXIpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgdGFza3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRhc2tzID0gW107CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmNhbGxNZXRob2QoInRhc2tzLnRhc2subGlzdCIsIHsKICAgICAgICAgICAgICAgICAgZmlsdGVyOiBfb2JqZWN0U3ByZWFkKHt9LCBmaWx0ZXIpLAogICAgICAgICAgICAgICAgICBzZWxlY3Q6IFsiSUQiLCAiVElUTEUiLCAiU1RBVFVTIiwgIkdST1VQX0lEIiwgIkNSRUFURURfQlkiLCAiQ1JFQVRFRF9EQVRFIiwgIlJFU1BPTlNJQkxFX0lEIiwgIkFDQ09NUExJQ0VTIiwgIkFVRElUT1JTIiwgIkNIQU5HRURfQlkiLCAiQ0hBTkdFRF9EQVRFIiwgIkNMT1NFRF9EQVRFIiwgIkFDVElWSVRZX0RBVEUiLCAiREFURV9TVEFSVCIsICJERUFETElORSIsICJNQVJLIiAvLyAnKicsCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICB0YXNrcyA9IF9jb250ZXh0My5zZW50Lm1hcChmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsWyJ0YXNrcyJdID8gZWxbInRhc2tzIl0gOiBlbDsKICAgICAgICAgICAgICAgIH0pLmZsYXQoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0YXNrcyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmNhbGxNZXRob2QoInVzZXIuZ2V0IiwgewogICAgICAgICAgICAgICAgRklMVEVSOiB7CiAgICAgICAgICAgICAgICAgIEFDVElWRTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgVVNFUl9UWVBFOiAiZW1wbG95ZWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX3RoaXM1LmVtcGxveWVlc0NvdW50ID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBfdGhpczUuY3JlYXRlUmVwb3J0KCk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9Cn07"},null]}