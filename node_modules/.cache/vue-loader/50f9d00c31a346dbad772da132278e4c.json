{"remainingRequest":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\src\\pages\\Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\src\\pages\\Main.vue","mtime":1706123530273},{"path":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1705726085379},{"path":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\.vscode\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1705726102679}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}