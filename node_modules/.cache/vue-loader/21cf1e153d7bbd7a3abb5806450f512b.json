{"remainingRequest":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\pages\\Control.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\src\\pages\\Control.vue","mtime":1706123446737},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1705726085379},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1705726085541},{"path":"C:\\Users\\Султан\\Downloads\\vuejs-bitrix24-ver2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1705726102679}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBNb2RhbCBmcm9tICJAL2NvbXBvbmVudHMvTW9kYWwiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNYWluIiwKICBjb21wb25lbnRzOiB7TW9kYWx9LAogIGRhdGE6ICgpID0+IHsKICAgIHJldHVybiB7CiAgICAgIGFkZGl0aW9uYWxGaWx0ZXJPcHRpb25zOiBbCiAgICAgICAgewogICAgICAgICAgdGV4dDogItCS0YHQtSIsCiAgICAgICAgICB2YWx1ZTogJ2FsbE9wZW5lZCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHRleHQ6ICLQntGC0LrRgNGL0YLQsCDQsiDQvtGC0YfQtdGC0L3QvtC8INC/0LXRgNC40L7QtNC1IiwKICAgICAgICAgIHZhbHVlOiAnaW5EaWFwYXpvbk9wZW5lZCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHRleHQ6ICLQntGC0LrRgNGL0YLQsCDQtNC+INC+0YLRh9C10YLQvdC+0LPQviDQv9C10YDQuNC+0LTQsCIsCiAgICAgICAgICB2YWx1ZTogJ2JlZm9yZU9wZW5lZCcKICAgICAgICB9CiAgICAgIF0sCgogICAgICBhZGRpdGlvbmFsRmlsdGVyOiAnaW5EaWFwYXpvbk9wZW5lZCcsCgogICAgICBpc092ZXJkdWU6IGZhbHNlLAogICAgICBtb2RhbDogZmFsc2UsCiAgICAgIG1vZGFsU3RhdGU6IHtzaG93OiBmYWxzZX0sCiAgICAgIGRhdGVzOiBbXSwKCiAgICAgIGhlYWRlcnM6IFsKICAgICAgICB7CiAgICAgICAgICB0ZXh0OiAn0J3QsNC40LzQtdC90L7QstCw0L3QuNC1INC/0YDQvtC10LrRgtCwJywKICAgICAgICAgIGFsaWduOiAnc3RhcnQnLAogICAgICAgICAgZGl2aWRlcjogdHJ1ZSwKICAgICAgICAgIHZhbHVlOiAnbmFtZScsCiAgICAgICAgfSwKICAgICAgICB7dGV4dDogJ9CW0LTQtdGCINCy0YvQv9C+0LvQvdC10L3QuNGPJywgdmFsdWU6ICcyJ30sCiAgICAgICAge3RleHQ6ICfQktGL0L/QvtC70L3Rj9C10YLRgdGPJywgdmFsdWU6ICczJ30sCiAgICAgICAge3RleHQ6ICfQntC20LjQtNCw0LXRgiDQutC+0L3RgtGA0L7Qu9GPJywgdmFsdWU6ICc0J30sCiAgICAgICAge3RleHQ6ICfQl9Cw0LLQtdGA0YjQtdC90LAnLCB2YWx1ZTogJzUnfSwKICAgICAgICB7dGV4dDogJ9Ce0YLQu9C+0LbQtdC90LAnLCBkaXZpZGVyOiB0cnVlLCB2YWx1ZTogJzYnfSwKICAgICAgICB7dGV4dDogJ9Ce0LHRidC40Lkg0LjRgtC+0LMnLCBkaXZpZGVyOiB0cnVlLCB2YWx1ZTogJ3N1bW1hcnknfSwKICAgICAgICB7CiAgICAgICAgICB0ZXh0OiAn0JTQvtC70LMnLAogICAgICAgICAgdmFsdWU6ICdkZWJ0JywKCiAgICAgICAgfSwKCgogICAgICBdLAogICAgICBpdGVtczogW10sCiAgICAgIGFsbFN1bW1hcnk6IHsKICAgICAgICAyOiBbXSwKICAgICAgICAzOiBbXSwKICAgICAgICA0OiBbXSwKICAgICAgICA1OiBbXSwKICAgICAgICA2OiBbXSwKICAgICAgICBzdW1tYXJ5OiBbXSwKICAgICAgICBkZWJ0OiBbXSwKICAgICAgfSwKICAgICAgdXNlcnM6IFtdLAogICAgICBkZXBhcnRtZW50czogW10sCiAgICAgIGN1cnJlbnRVc2VyczogdW5kZWZpbmVkLAogICAgICBjdXJyZW50RGVwYXJ0bWVudDogdW5kZWZpbmVkLAogICAgICBmaWx0ZXJVc2VyOiB1bmRlZmluZWQsCiAgICAgIGZpbHRlclVzZXJDcmVhdGVkOiAnJywKCiAgICAgIHdpbmRvdzogdW5kZWZpbmVkLAoKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBkYXRlUmFuZ2VUZXh0KCkgewogICAgICBpZiAodGhpcy5kYXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICByZXR1cm4gItCe0YLRh9GR0YIg0LfQsCAiICsgdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZXNbMF0pOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLmRhdGVzWzBdIDwgdGhpcy5kYXRlc1sxXSkKICAgICAgICAgIHJldHVybiAi0J/QtdGA0LjQvtC0INGBICIgKyB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlc1swXSkgKyAiINC/0L4gIiArIHRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGVzWzFdKTsKICAgICAgICBlbHNlIHJldHVybiAi0J/QtdGA0LjQvtC0INGBICIgKyB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlc1sxXSkgKyAiINC/0L4gIiArIHRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGVzWzBdKTsKICAgICAgfQogICAgfQogIH0sCiAgZmlsdGVyczogewogICAgc2Vjb25kc1RvSG91cnNBbmRNaW51dGVzKHNlY29uZHMpIHsKICAgICAgc2Vjb25kcyA9IE51bWJlcihzZWNvbmRzKTsKICAgICAgdmFyIGggPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTsKICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKHNlY29uZHMgJSAzNjAwIC8gNjApOwoKICAgICAgdmFyIGhEaXNwbGF5ID0gaCA+IDAgPyBoICsgJ9GHLiAnIDogIiI7CiAgICAgIHZhciBtRGlzcGxheSA9IG0gPiAwID8gbSArICLQvNC40L0uICIgOiAiIjsKICAgICAgaWYgKCFoICYmICFtKSB7CiAgICAgICAgcmV0dXJuIDAKICAgICAgfQogICAgICByZXR1cm4gaERpc3BsYXkgKyBtRGlzcGxheTsKCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzaG93RGV0YWlscyhpdGVtcykgewogICAgICB0aGlzLm1vZGFsU3RhdGUuaXRlbXMgPSBpdGVtczsKICAgICAgdGhpcy5tb2RhbFN0YXRlLnNob3cgPSB0cnVlOwoKICAgIH0sCgoKICAgIGFzeW5jIGZpbmRDaGlsZERlcGFydG1lbnRzKGlkKSB7CiAgICAgIGlmICghaWQpIHJldHVybiBbXTsKICAgICAgZWxzZSB7CiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZCgKICAgICAgICAgICAgJ2RlcGFydG1lbnQuZ2V0JywgeyJQQVJFTlQiOiBpZH0KICAgICAgICApCiAgICAgICAgbGV0IGlubmVyID0gW107CiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgcmVzKSB7CiAgICAgICAgICBpbm5lciA9IGlubmVyLmNvbmNhdChhd2FpdCB0aGlzLmZpbmRDaGlsZERlcGFydG1lbnRzKGtleS5JRCkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzLmNvbmNhdChpbm5lcikKICAgICAgfQogICAgfSwKCgogICAgYXN5bmMgc2V0VmFsaWRVc2VycygpIHsKCiAgICAgIGxldCB1c2VycyA9IFtdOwogICAgICBsZXQgZGVwYXJ0bWVudHMgPSBbXTsKCiAgICAgIGlmICh3aW5kb3cuaXNTdXBlcikgewoKICAgICAgICB1c2VycyA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZCgKICAgICAgICAgICAgJ3VzZXIuZ2V0JywgewogICAgICAgICAgICAgIEZJTFRFUjoge30sCiAgICAgICAgICAgICAgQURNSU5fTU9ERTogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgKTsKCiAgICAgICAgZGVwYXJ0bWVudHMgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoCiAgICAgICAgICAgICdkZXBhcnRtZW50LmdldCcsIHt9CiAgICAgICAgKQogICAgICB9IGVsc2UgewoKICAgICAgICBkZXBhcnRtZW50cyA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZCgKICAgICAgICAgICAgJ2RlcGFydG1lbnQuZ2V0JywgeyJVRl9IRUFEIjogd2luZG93LlVTRVIuSUR9CiAgICAgICAgKQoKICAgICAgICBmb3IgKGNvbnN0IGRlcGFydG1lbnQgb2YgZGVwYXJ0bWVudHMpIHsKICAgICAgICAgIGRlcGFydG1lbnRzID0gZGVwYXJ0bWVudHMuY29uY2F0KGF3YWl0IHRoaXMuZmluZENoaWxkRGVwYXJ0bWVudHMoZGVwYXJ0bWVudC5JRCkpOwogICAgICAgIH0KCiAgICAgICAgdXNlcnMgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoJ3VzZXIuZ2V0JywgewogICAgICAgICAgICAgIEZJTFRFUjogewogICAgICAgICAgICAgICAgLy8gQUNUSVZFOiB0cnVlLAogICAgICAgICAgICAgICAgVUZfREVQQVJUTUVOVDogZGVwYXJ0bWVudHMubWFwKChkZXApID0+IGRlcC5JRCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgdXNlcnMucHVzaCh3aW5kb3cuVVNFUik7CgogICAgICB9CgogICAgICB0aGlzLnVzZXJzID0gdXNlcnMKICAgICAgdGhpcy5kZXBhcnRtZW50cyA9IGRlcGFydG1lbnRzOwogICAgfSwKCgogICAgZm9ybWF0RGF0ZShhcmcpIHsKICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShhcmcpOwogICAgICBsZXQgZGQgPSBkYXRlLmdldERhdGUoKTsKICAgICAgaWYgKGRkIDwgMTApIGRkID0gJzAnICsgZGQ7CiAgICAgIGxldCBtbSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7CiAgICAgIGlmIChtbSA8IDEwKSBtbSA9ICcwJyArIG1tOwogICAgICBsZXQgeXkgPSBkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDA7CiAgICAgIGlmICh5eSA8IDEwKSB5eSA9ICcwJyArIHl5OwogICAgICByZXR1cm4gZGQgKyAnLicgKyBtbSArICcuJyArIHl5OwogICAgfSwKCgogICAgYXN5bmMgZmV0Y2hHcm91cHMoKSB7CiAgICAgIGxldCBncm91cHMgPSBbXTsKCiAgICAgIGxldCBzdGFydERhdGU7CiAgICAgIGxldCBmaW5pc2hEYXRlOwogICAgICBpZiAodGhpcy5kYXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGVzWzBdKTsKICAgICAgICBmaW5pc2hEYXRlID0gbmV3IERhdGUodGhpcy5kYXRlc1swXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKG5ldyBEYXRlKHRoaXMuZGF0ZXNbMF0pID4gbmV3IERhdGUodGhpcy5kYXRlc1sxXSkpIHsKICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZXNbMV0pOwogICAgICAgICAgZmluaXNoRGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZXNbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGVzWzBdKTsKICAgICAgICAgIGZpbmlzaERhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGVzWzFdKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3RhcnREYXRlLnNldEhvdXJzKDAsIDAsIDApOwogICAgICBmaW5pc2hEYXRlLnNldEhvdXJzKDIzLCA1OSwgNTkpOwoKICAgICAgbGV0IGZpbHRlciA9IHsKICAgICAgICAvLyAnPj1EQVRFX0NSRUFURSc6IHN0YXJ0RGF0ZS50b0lTT1N0cmluZygpLAogICAgICAgIC8vICc8PURBVEVfQ1JFQVRFJzogZmluaXNoRGF0ZS50b0lTT1N0cmluZygpLAogICAgICAgICdDSEVDS19QRVJNSVNTSU9OUyc6ICdOJywKICAgICAgICAnUFJPSkVDVCc6ICdZJywKICAgICAgfQoKICAgICAgYXdhaXQgdGhpcy5jYWxsTWV0aG9kKAogICAgICAgICAgJ3NvbmV0X2dyb3VwLmdldCcsCiAgICAgICAgICB7CiAgICAgICAgICAgIEZJTFRFUjogZmlsdGVyLAogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgZ3JvdXBzID0gcmVzOwogICAgICB9KTsKICAgICAgcmV0dXJuIGdyb3VwczsKICAgIH0sCgoKICAgIGZvcm1hdERhdGVGaWx0ZXIoZGF0ZXMpIHsKICAgICAgbGV0IHN0YXJ0RGF0ZTsKICAgICAgbGV0IGZpbmlzaERhdGU7CiAgICAgIGlmIChkYXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlc1swXSk7CiAgICAgICAgZmluaXNoRGF0ZSA9IG5ldyBEYXRlKGRhdGVzWzBdKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAobmV3IERhdGUoZGF0ZXNbMF0pID4gbmV3IERhdGUoZGF0ZXNbMV0pKSB7CiAgICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlc1sxXSk7CiAgICAgICAgICBmaW5pc2hEYXRlID0gbmV3IERhdGUoZGF0ZXNbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlc1swXSk7CiAgICAgICAgICBmaW5pc2hEYXRlID0gbmV3IERhdGUoZGF0ZXNbMV0pOwogICAgICAgIH0KICAgICAgfQogICAgICBzdGFydERhdGUuc2V0SG91cnMoMCwgMCwgMCk7CiAgICAgIGZpbmlzaERhdGUuc2V0SG91cnMoMjMsIDU5LCA1OSk7CiAgICAgIHJldHVybiBbc3RhcnREYXRlLCBmaW5pc2hEYXRlXTsKICAgIH0sCgogICAgYXN5bmMgZmV0Y2hUYXNrcyhmaWx0ZXIpIHsKCiAgICAgIGxldCB0YXNrcyA9IFtdOwogICAgICBhd2FpdCB0aGlzLmNhbGxNZXRob2QoCiAgICAgICAgICAndGFza3MudGFzay5saXN0JywKICAgICAgICAgIHsKICAgICAgICAgICAgZmlsdGVyOiB7CiAgICAgICAgICAgICAgLi4uZmlsdGVyLAogICAgICAgICAgICAgICdDUkVBVEVEX0JZJzogdGhpcy5maWx0ZXJVc2VyQ3JlYXRlZCwKICAgICAgICAgICAgICAnUkVTUE9OU0lCTEVfSUQnOiB0aGlzLmZpbHRlclVzZXIgPyB0aGlzLmZpbHRlclVzZXIubWFwKGVsID0+IGVsLklEKSA6IHRoaXMuY3VycmVudFVzZXJzLm1hcChlbCA9PiBlbC5JRCksCiAgICAgICAgICAgICAgJyFSRVNQT05TSUJMRV9JRCcgOiB0aGlzLmZpbHRlclVzZXJDcmVhdGVkCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlbGVjdDogWwogICAgICAgICAgICAgICdJRCcsCiAgICAgICAgICAgICAgJ1RJVExFJywKICAgICAgICAgICAgICAnU1RBVFVTJywKICAgICAgICAgICAgICAnR1JPVVBfSUQnLAogICAgICAgICAgICAgICdDUkVBVEVEX0JZJywKICAgICAgICAgICAgICAnQ1JFQVRFRF9EQVRFJywKICAgICAgICAgICAgICAnUkVTUE9OU0lCTEVfSUQnLAogICAgICAgICAgICAgICdBQ0NPTVBMSUNFUycsCiAgICAgICAgICAgICAgJ0FVRElUT1JTJywKICAgICAgICAgICAgICAnQ0hBTkdFRF9CWScsCiAgICAgICAgICAgICAgJ0NIQU5HRURfREFURScsCiAgICAgICAgICAgICAgJ0NMT1NFRF9EQVRFJywKICAgICAgICAgICAgICAnQUNUSVZJVFlfREFURScsCiAgICAgICAgICAgICAgJ0RBVEVfU1RBUlQnLAogICAgICAgICAgICAgICdERUFETElORScsCiAgICAgICAgICAgICAgLy8gJyonLAogICAgICAgICAgICBdCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICByZXMuZm9yRWFjaChlbCA9PiB7CiAgICAgICAgICB0YXNrcyA9IGVsWyd0YXNrcyddID8gdGFza3MuY29uY2F0KGVsWyd0YXNrcyddKSA6IHRhc2tzLmNvbmNhdChlbCkKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICBhd2FpdCB0aGlzLmNhbGxNZXRob2QoCiAgICAgICAgICAndGFza3MudGFzay5saXN0JywKICAgICAgICAgIHsKICAgICAgICAgICAgZmlsdGVyOiB7CiAgICAgICAgICAgICAgLi4uZmlsdGVyLAogICAgICAgICAgICAgICdDUkVBVEVEX0JZJzogdGhpcy5maWx0ZXJVc2VyQ3JlYXRlZCwKICAgICAgICAgICAgICBBQ0NPTVBMSUNFOiB0aGlzLmZpbHRlclVzZXIgPyB0aGlzLmZpbHRlclVzZXIubWFwKGVsID0+IGVsLklEKSA6IHRoaXMuY3VycmVudFVzZXJzLm1hcChlbCA9PiBlbC5JRCkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2VsZWN0OiBbCiAgICAgICAgICAgICAgJ0lEJywKICAgICAgICAgICAgICAnVElUTEUnLAogICAgICAgICAgICAgICdTVEFUVVMnLAogICAgICAgICAgICAgICdHUk9VUF9JRCcsCiAgICAgICAgICAgICAgJ0NSRUFURURfQlknLAogICAgICAgICAgICAgICdDUkVBVEVEX0RBVEUnLAogICAgICAgICAgICAgICdSRVNQT05TSUJMRV9JRCcsCiAgICAgICAgICAgICAgJ0FDQ09NUExJQ0VTJywKICAgICAgICAgICAgICAnQVVESVRPUlMnLAogICAgICAgICAgICAgICdDSEFOR0VEX0JZJywKICAgICAgICAgICAgICAnQ0hBTkdFRF9EQVRFJywKICAgICAgICAgICAgICAnQ0xPU0VEX0RBVEUnLAogICAgICAgICAgICAgICdBQ1RJVklUWV9EQVRFJywKICAgICAgICAgICAgICAnREFURV9TVEFSVCcsCiAgICAgICAgICAgICAgJ0RFQURMSU5FJywKICAgICAgICAgICAgICAvLyAnKicsCiAgICAgICAgICAgIF0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHJlcy5mb3JFYWNoKGVsID0+IHsKICAgICAgICAgIHRhc2tzID0gZWxbJ3Rhc2tzJ10gPyB0YXNrcy5jb25jYXQoZWxbJ3Rhc2tzJ10pIDogdGFza3MuY29uY2F0KGVsKQogICAgICAgIH0pOwogICAgICB9KTsKCgogICAgICAvLyBpZiAodGhpcy5jdXJyZW50VXNlciAmJiB0aGlzLmN1cnJlbnRVc2VyLklEKSB7CiAgICAgIC8vICAgdGFza3MgPSB0YXNrcy5maWx0ZXIoZWwgPT4gZWwucmVzcG9uc2libGVJZCA9PT0gdGhpcy5jdXJyZW50VXNlci5JRCB8fCBlbC5hY2NvbXBsaWNlcy5maW5kKGwgPT4gbCA9PT0gdGhpcy5jdXJyZW50VXNlci5JRCkpCiAgICAgIC8vIH0KCiAgICAgIHRhc2tzID0gdGFza3MuZmlsdGVyKGVsPT4gZWwuY3JlYXRlZEJ5IT09ZWwucmVzcG9uc2libGVJZCkKICAgICAgcmV0dXJuIHRhc2tzOwogICAgfSwKCiAgICBjaGFuZ2VEZXBhcnRtZW50KCkgewogICAgICBpZiAodGhpcy5jdXJyZW50RGVwYXJ0bWVudCkgewogICAgICAgIHRoaXMuY3VycmVudFVzZXJzID0gdGhpcy51c2Vycy5maWx0ZXIoKGVsKSA9PiBlbC5VRl9ERVBBUlRNRU5ULmZpbmQoZHAgPT4gZHAgPT0gdGhpcy5jdXJyZW50RGVwYXJ0bWVudC5JRCkpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jdXJyZW50VXNlcnMgPSB0aGlzLnVzZXJzOwogICAgICB9CgoKICAgICAgdGhpcy5jcmVhdGVSZXBvcnQoKTsKICAgIH0sCgogICAgYXN5bmMgY3JlYXRlUmVwb3J0KCkgewoKCiAgICAgIHRoaXMuaXRlbXMgPSBbXQogICAgICB0aGlzLmFsbFN1bW1hcnkgPSB7CiAgICAgICAgMjogW10sCiAgICAgICAgMzogW10sCiAgICAgICAgNDogW10sCiAgICAgICAgNTogW10sCiAgICAgICAgNjogW10sCiAgICAgICAgc3VtbWFyeTogW10sCiAgICAgICAgZGVidDogW10sCgogICAgICB9CiAgICAgIHRoaXMuJHJlZnM/LmRpYWxvZz8uc2F2ZSh0aGlzLmRhdGVzKQogICAgICBsZXQgZm9ybWF0RGF0ZUZpbHRlciA9IHRoaXMuZm9ybWF0RGF0ZUZpbHRlcih0aGlzLmRhdGVzKQoKICAgICAgbGV0IHRhc2tzID0gW10KCgogICAgICBpZiAodGhpcy5hZGRpdGlvbmFsRmlsdGVyID09PSAnYmVmb3JlT3BlbmVkJykgewoKICAgICAgICBsZXQgZmlsdGVyQ3JlYXRlZFRhc2tzID0gewogICAgICAgICAgJzxDUkVBVEVEX0RBVEUnOiBmb3JtYXREYXRlRmlsdGVyWzBdLAogICAgICAgICAgIiFSRUFMX1NUQVRVUyI6IDUKICAgICAgICB9OwogICAgICAgIHRhc2tzID0gdGFza3MuY29uY2F0KGF3YWl0IHRoaXMuZmV0Y2hUYXNrcyhmaWx0ZXJDcmVhdGVkVGFza3MpKQoKICAgICAgfQoKICAgICAgZWxzZSBpZiAodGhpcy5hZGRpdGlvbmFsRmlsdGVyID09PSAnaW5EaWFwYXpvbk9wZW5lZCcpIHsKICAgICAgICBsZXQgZmlsdGVyQ3JlYXRlZFRhc2tzID0gewogICAgICAgICAgJz5DUkVBVEVEX0RBVEUnOiBmb3JtYXREYXRlRmlsdGVyWzBdLAogICAgICAgICAgJzxDUkVBVEVEX0RBVEUnOiBmb3JtYXREYXRlRmlsdGVyWzFdCiAgICAgICAgfTsKICAgICAgICB0YXNrcyA9IHRhc2tzLmNvbmNhdChhd2FpdCB0aGlzLmZldGNoVGFza3MoZmlsdGVyQ3JlYXRlZFRhc2tzKSkKICAgICAgfQogICAgICBlbHNlICB7CiAgICAgICAgbGV0IGZpbHRlckNyZWF0ZWRUYXNrcyA9IHsKICAgICAgICAgICIhUkVBTF9TVEFUVVMiOiA1LAogICAgICAgICAgJzxDUkVBVEVEX0RBVEUnOiBmb3JtYXREYXRlRmlsdGVyWzBdLAogICAgICAgIH07CiAgICAgICAgdGFza3MgPSB0YXNrcy5jb25jYXQoYXdhaXQgdGhpcy5mZXRjaFRhc2tzKGZpbHRlckNyZWF0ZWRUYXNrcykpCgogICAgICAgIGZpbHRlckNyZWF0ZWRUYXNrcyA9IHsKICAgICAgICAgICc+Q1JFQVRFRF9EQVRFJzogZm9ybWF0RGF0ZUZpbHRlclswXSwKICAgICAgICAgICc8Q1JFQVRFRF9EQVRFJzogZm9ybWF0RGF0ZUZpbHRlclsxXQogICAgICAgIH07CiAgICAgICAgdGFza3MgPSB0YXNrcy5jb25jYXQoYXdhaXQgdGhpcy5mZXRjaFRhc2tzKGZpbHRlckNyZWF0ZWRUYXNrcykpCgogICAgICB9CgoKICAgICAgaWYgKHRoaXMuaXNPdmVyZHVlKSB7CiAgICAgICAgbGV0IGN1cnJEYXRlID0gdGhpcy5tb21lbnQoKTsKICAgICAgICB0YXNrcyA9IHRhc2tzLmZpbHRlcih0YXNrID0+IHsKICAgICAgICAgIGlmICghdGFzay5kZWFkbGluZSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgbGV0IGRlYWRsaW5lID0gdGhpcy5tb21lbnQodGFzay5kZWFkbGluZSk7CiAgICAgICAgICBpZiAodGFzay5zdGF0dXMgPT0gJzUnKSB7CiAgICAgICAgICAgIGxldCBjbG9zZWREYXRlID0gdGhpcy5tb21lbnQodGFzay5jbG9zZWREYXRlKTsKICAgICAgICAgICAgaWYgKGNsb3NlZERhdGUuaXNBZnRlcihkZWFkbGluZSkpIHJldHVybiB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGN1cnJEYXRlLmlzQWZ0ZXIoZGVhZGxpbmUpKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9KQoKICAgICAgfQoKCiAgICAgIGxldCBkYXRhID0ge307CiAgICAgIGxldCBhbHJlYWR5SXRlcmF0ZWQgPSBbXTsKICAgICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHsKICAgICAgICBpZiAoIWFscmVhZHlJdGVyYXRlZC5maW5kKChlbGVtKSA9PiBlbGVtID09PSB0YXNrLmlkKSkgewogICAgICAgICAgYWxyZWFkeUl0ZXJhdGVkLnB1c2godGFzay5pZCkKCiAgICAgICAgICBpZiAoIWRhdGFbdGFzay5ncm91cElkXSkgewogICAgICAgICAgICBkYXRhW3Rhc2suZ3JvdXBJZF0gPSB7CiAgICAgICAgICAgICAgbmFtZTogdGFzay5ncm91cElkICE9PSAnMCcgPyB0YXNrLmdyb3VwPy5uYW1lIDogJ9CR0LXQtyDQs9GA0YPQv9C/0YsnCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnMiddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnMyddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnNCddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnNSddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnNiddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnc3VtbWFyeSddID0gW107CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnZGVidCddID0gW107CiAgICAgICAgICB9CgoKICAgICAgICAgIHRoaXMuYWxsU3VtbWFyeVt0YXNrLnN0YXR1c10ucHVzaCh0YXNrKQogICAgICAgICAgdGhpcy5hbGxTdW1tYXJ5WydzdW1tYXJ5J10ucHVzaCh0YXNrKQogICAgICAgICAgZGF0YVt0YXNrLmdyb3VwSWRdW3Rhc2suc3RhdHVzXS5wdXNoKHRhc2spOwogICAgICAgICAgZGF0YVt0YXNrLmdyb3VwSWRdWydzdW1tYXJ5J10ucHVzaCh0YXNrKTsKCiAgICAgICAgICBpZiAodGFzay5zdGF0dXMgIT0gJzUnKSB7CiAgICAgICAgICAgIGRhdGFbdGFzay5ncm91cElkXVsnZGVidCddLnB1c2godGFzaykKICAgICAgICAgICAgdGhpcy5hbGxTdW1tYXJ5WydkZWJ0J10ucHVzaCh0YXNrKQogICAgICAgICAgfQoKCiAgICAgICAgfQogICAgICB9KQoKICAgICAgdGhpcy5pdGVtcyA9IE9iamVjdC52YWx1ZXMoZGF0YSk7CiAgICB9LAoKICAgIGV4cG9ydFRvRmlsZSgpIHsKICAgICAgbGV0IGV4cG9ydERhdGEgPSBbWyLQn9GA0L7QtdC60YIiLCAi0JbQtNC10YIg0LLRi9C/0L7Qu9C90LXQvdC40Y8iLCAi0JLRi9C/0L7Qu9C90Y/QtdGC0YHRjyIsICLQntC20LjQtNCw0LXRgiDQutC+0L3RgtGA0L7Qu9GPIiwgItCX0LDQstC10YDRiNC10L3QsCIsICLQntGC0LvQvtC20LXQvdCwIiwgItCe0LHRidC40Lkg0LjRgtC+0LMiLCAi0JTQvtC70LMiXV07CgogICAgICB0aGlzLml0ZW1zLmZvckVhY2gocHJvamVjdCA9PiB7CiAgICAgICAgZXhwb3J0RGF0YS5wdXNoKFtwcm9qZWN0Lm5hbWUsIHByb2plY3RbJzInXT8ubGVuZ3RoLCBwcm9qZWN0WyczJ10/Lmxlbmd0aCwgcHJvamVjdFsnNCddPy5sZW5ndGgsIHByb2plY3RbJzUnXT8ubGVuZ3RoLCBwcm9qZWN0Wyc2J10/Lmxlbmd0aCwgcHJvamVjdC5zdW1tYXJ5Py5sZW5ndGgsIHByb2plY3QuZGVidD8ubGVuZ3RoXSkKICAgICAgfSkKICAgICAgLy8KCgogICAgICBsZXQgdGJsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTsKICAgICAgdGJsLnN0eWxlLmJvcmRlclNwYWNpbmcgPSAnMCc7CiAgICAgIHRibC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJzsKCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwb3J0RGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIGNvbnN0IHRyID0gdGJsLmluc2VydFJvdygpOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXhwb3J0RGF0YVtpXS5sZW5ndGg7IGorKykgewoKCiAgICAgICAgICBsZXQgdGV4dCA9ICcnOwoKCiAgICAgICAgICB0ZXh0ID0gZXhwb3J0RGF0YVtpXVtqXTsKCiAgICAgICAgICBjb25zdCB0ZCA9IHRyLmluc2VydENlbGwoKTsKICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTsKCiAgICAgICAgICBpZiAoaSA9PT0gMCkgewoKICAgICAgICAgICAgdGQuc3R5bGUud2lkdGggPSAnMTgwcHgnOwogICAgICAgICAgICB0ZC5zdHlsZS5jb2xvciA9ICcjZmYwMDAwJzsKICAgICAgICAgICAgdGQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmYzAwMDAnOwogICAgICAgICAgfQoKCiAgICAgICAgICB0ZC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIGJsYWNrJzsKCgogICAgICAgIH0KICAgICAgfQoKCiAgICAgIHRoaXMudGFibGVUb0V4Y2VsKCkodGJsLCAndGVzdCcsICJmaWxlIik7CiAgICB9LAoKICAgIHRhYmxlVG9FeGNlbCgpIHsKICAgICAgdmFyIHVyaSA9ICdkYXRhOmFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbDtiYXNlNjQsJwogICAgICAgICAgLAogICAgICAgICAgdGVtcGxhdGUgPSAnPGh0bWwgeG1sbnM6bz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlIiB4bWxuczp4PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjwhLS1baWYgZ3RlIG1zbyA5XT48eG1sPjx4OkV4Y2VsV29ya2Jvb2s+PHg6RXhjZWxXb3Jrc2hlZXRzPjx4OkV4Y2VsV29ya3NoZWV0Pjx4Ok5hbWU+e3dvcmtzaGVldH08L3g6TmFtZT48eDpXb3Jrc2hlZXRPcHRpb25zPjx4OkRpc3BsYXlHcmlkbGluZXMvPjwveDpXb3Jrc2hlZXRPcHRpb25zPjwveDpFeGNlbFdvcmtzaGVldD48L3g6RXhjZWxXb3Jrc2hlZXRzPjwveDpFeGNlbFdvcmtib29rPjwveG1sPjwhW2VuZGlmXS0tPjxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOCIvPjwvaGVhZD48Ym9keT48dGFibGU+e3RhYmxlfTwvdGFibGU+PC9ib2R5PjwvaHRtbD4nCiAgICAgICAgICAsIGJhc2U2NCA9IGZ1bmN0aW9uIChzKSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocykpKQogICAgICAgICAgfQogICAgICAgICAgLCBmb3JtYXQgPSBmdW5jdGlvbiAocywgYykgewogICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC97KFx3Kyl9L2csIGZ1bmN0aW9uIChtLCBwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNbcF07CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgICAsIGRvd25sb2FkVVJJID0gZnVuY3Rpb24gKHVyaSwgbmFtZSkgewogICAgICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgICAgbGluay5kb3dubG9hZCA9IG5hbWU7CiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVyaTsKICAgICAgICAgICAgbGluay5jbGljaygpOwogICAgICAgICAgfQoKICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YWJsZSwgbmFtZSwgZmlsZU5hbWUpIHsKICAgICAgICBpZiAoIXRhYmxlLm5vZGVUeXBlKSB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYmxlKQogICAgICAgIHZhciBjdHggPSB7d29ya3NoZWV0OiBuYW1lIHx8ICdXb3Jrc2hlZXQnLCB0YWJsZTogdGFibGUuaW5uZXJIVE1MfQogICAgICAgIHZhciByZXN1cmkgPSB1cmkgKyBiYXNlNjQoZm9ybWF0KHRlbXBsYXRlLCBjdHgpKQogICAgICAgIGRvd25sb2FkVVJJKHJlc3VyaSwgZmlsZU5hbWUpOwogICAgICB9CiAgICB9LAoKCiAgfSwKCgogIGFzeW5jIGNyZWF0ZWQoKSB7CgogICAgdGhpcy5kYXRlcyA9IFt0aGlzLm1vbWVudCgpLnN0YXJ0T2YoJ21vbnRoJykuZm9ybWF0KCdZWVlZLU1NLUREJyksIHRoaXMubW9tZW50KCkuZW5kT2YoJ21vbnRoJykuZm9ybWF0KCdZWVlZLU1NLUREJyldOwoKCiAgICBhd2FpdCB0aGlzLnNldFZhbGlkVXNlcnMoKQogICAgdGhpcy5jdXJyZW50VXNlcnMgPSB0aGlzLnVzZXJzOwogICAgdGhpcy53aW5kb3cgPSB3aW5kb3c7CiAgICBhd2FpdCB0aGlzLmNyZWF0ZVJlcG9ydCgpOwoKCiAgfQp9Cg=="},null]}